Review Homework 3 CS-438 Fall 2019

Reviewer Name: Liangwei CHEN

----------
Review 0
----------
Score (min 1, max 5):
4.5

Advantages and Disadvantages (150-300 words):

Advantages:
	1. The project is well structured, in the sense that different functionalities have different corresponding files. Moreover, most of the functions and variables are added with proper comments so that the readability of the whole project is really good. The codind style is neat and clean.
	2. The usages of lock to prevent conflict are accurate.
	3. The main function only contains necessary stuff to intialize the sysem. This fact make it easier to dig into every functional part of the project easily.
Disadvantages:
	1. The redundancy of files. The project does have many files for differnt struct, such as "Downloadable file info", "Message", "FileInfos", etc. From my point of view, it maybe better to merge all structs for the same functionalities into the same file to reduce the total number of files in the whole project.
	2. The blockchain sections are not well-documented. It is hard to get the motivation of every part in those functions as no comments were added with it.

Design recommendations (100-200 words):
	1. From project structure point of view, in order to handle the drawback mentioned in disadvantage part, more integration of struct definition may be done to provide denser structure.
	2. From clarity point of view, the motivation or the functionality of a certain block of codes should be added.
	3. From data structure usage point of view, more channels may be added into the blockchain implementation section to handle the communication between different blocks of codes. Since the efficieny provided by channel is one of the most important features provided by Golang, it will be beneficial to replace some of mutual exclusive locks used for synchronization by channels.

----------
Review 1
----------
Score (min 1, max 5):
5

Advantages and Disadvantages (150-300 words):
Advantages:
	1. The project provides an implementation of the last part of homework3, que sera consensus, which is really difficult from my point of view.
	2. The project uses channels to communicate between differnt blocks. This makes use the build-in concurrency suppport of golang and reduce the usage of tedious mutual exclusive locks.
	3. The project uses the atomic module to handle the read and write of of atmoic variable such as gossiper.seqID. This decision really simplifies the code and improve the readability.
	4. The debug choices allow other programmer to modify and the functionality of each section. This fact enables further development based on the project.
Disadvantages:
	1. The section of blockchain implementation lacks sufficient number of comments, which make the code a little bit hard to read.
	2. There is a large section of commented code in qsc.go file. No comments have been added to describe why those codes are not used in the finalized stable edition.

Design recommendations (100-200 words):
	1. From clarity point of view, I propose the authors to add comments to some technically important part, such as the different situation in que sera consensus and tlc implementations.
	2. Since channels are used in many places, perhaps it may be useful to add descriptions of where a specific channel will be used and what is the purpose at the time of initialization. This allows the reader to know which go routines need to be communicated and whether the communications have been set up correctly.
	3. Apart from the above suggestions there may be nothing else to advise as the project is in general a well developed and elegant one.

----------
Review 2
----------
Score (min 1, max 5):
4

Advantages and Disadvantages (150-300 words):

Advantages
	1. In general the project is well developed as it provides the implementations of most of the requirements in homework 3.
	2. The abnormal cases are carefully logged and handled.
	3. Most of functions are well documented with the usage and motivations.
Disadvantages:
	1. There is no implmentation of que sera consensus.
	2. The naming of file may not be careful enough. For instance, the "TLCAckMessageHandler.go" is named as "TCLAckMessageHandler.go". This will easily makes a reader who may not be familiar with tlc fell confused about the usage of that file.
	3. All the codes in TLCMessageHandler.go are commented. From my point of view, this may make the requirement of TLC unsatisfied. Perhaps the author should provide some notes on why such a large section of codes are not used in the final edition.
	4. No idea why the SearchManager.go has also been commented. This perhaps indicates that the project is not able to handle the searching and replying correctly.

Design recommendations (100-200 words):
	1. First of all, the codes in the project should be relevant to the functionalities. Since there are many codes commented but not removed, it make the reader harder to know which required functionalities are correctly implemented and which are not.
	2. Secondly, there is no usage of mutex in the file relative to homework3 such as TLCMessageHandler.go and SearchManager.go. Perhaps that is the reason why some functionalities cannot be realized by this project. The authors should have realized that we need to handle a lot of concurrent situation in this project and the usage of lock is inevitable. Adding some locks to handle concurrent read and write correctly may make the commented section works and pass the tests provided by the TA team.